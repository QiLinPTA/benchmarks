Array.newInstance;byte[];sun.text.bidi.BidiBase.getMemory;1130;;
Array.newInstance;char[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;int[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.Class[];java.util.AbstractCollection.toArray;179;;
Array.newInstance;java.lang.Class[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.Class[];java.util.Arrays.copyOfRange;3484;;
Array.newInstance;java.lang.Class[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.Object[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.String[];java.util.AbstractCollection.toArray;179;;
Array.newInstance;java.lang.String[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.Thread[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.invoke.LambdaForm$BasicType[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.invoke.LambdaForm$BasicType[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.invoke.LambdaForm$Name[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.invoke.LambdaForm$Name[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.invoke.MethodHandle[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.reflect.Method[];java.util.Arrays.copyOf;3212;;
Array.newInstance;javax.management.openmbean.OpenType[];java.util.Arrays.copyOf;3212;;
Array.newInstance;sun.font.PhysicalFont[];java.util.concurrent.ConcurrentHashMap$CollectionView.toArray;4440;;
Array.newInstance;sun.java2d.loops.GraphicsPrimitive[];java.util.TimSort.<init>;157;;
Array.newInstance;sun.java2d.loops.GraphicsPrimitive[];java.util.TimSort.ensureCapacity;934;;
Array.newInstance;sun.security.jca.ProviderConfig[];java.util.Arrays.copyOf;3212;;
Class.forName;com.sun.management.GcInfo;sun.management.GarbageCollectionNotifInfoCompositeData$1.run;68;;
Class.forName;com.sun.management.GcInfo;sun.management.GcInfoCompositeData$1.run;75;;
Class.forName;com.sun.management.GcInfo;sun.management.GcInfoCompositeData$2.run;87;;
Class.forName;java.awt.EventQueue;sun.awt.SunToolkit.initEQ;123;;
Class.forName;java.awt.font.TextAttribute;sun.text.bidi.BidiBase$TextAttributeConstants.getClass;3471;;
Class.forName;java.awt.image.AffineTransformOp;sun.awt.image.ImagingLib.<clinit>;124;;
Class.forName;java.awt.image.ConvolveOp;sun.awt.image.ImagingLib.<clinit>;130;;
Class.forName;java.awt.image.LookupOp;sun.awt.image.ImagingLib.<clinit>;118;;
Class.forName;java.lang.Boolean;sun.management.MappedMXBeanType.<clinit>;805;;
Class.forName;java.lang.Byte;sun.management.MappedMXBeanType.<clinit>;805;;
Class.forName;java.lang.Character;sun.management.MappedMXBeanType.<clinit>;805;;
Class.forName;java.lang.Class;sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType;114;;
Class.forName;java.lang.Double;sun.management.MappedMXBeanType.<clinit>;805;;
Class.forName;java.lang.Float;sun.management.MappedMXBeanType.<clinit>;805;;
Class.forName;java.lang.Integer;sun.management.MappedMXBeanType.<clinit>;805;;
Class.forName;java.lang.Long;sun.management.MappedMXBeanType.<clinit>;805;;
Class.forName;java.lang.Short;sun.management.MappedMXBeanType.<clinit>;805;;
Class.forName;java.lang.String;sun.management.MappedMXBeanType.<clinit>;805;;
Class.forName;java.lang.String;sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType;114;;
Class.forName;java.lang.Void;sun.management.MappedMXBeanType.<clinit>;805;;
Class.forName;java.lang.management.MemoryUsage;sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType;114;;
Class.forName;java.math.BigDecimal;sun.management.MappedMXBeanType.<clinit>;805;;
Class.forName;java.math.BigInteger;sun.management.MappedMXBeanType.<clinit>;805;;
Class.forName;java.net.Inet6AddressImpl;java.net.InetAddress.loadImpl;1551;;
Class.forName;java.security.MessageDigestSpi;java.security.Security.getSpiClass;675;;
Class.forName;java.util.Date;sun.management.MappedMXBeanType.<clinit>;805;;
Class.forName;java.util.Map;sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType;114;;
Class.forName;java.util.logging.LoggingProxyImpl;sun.util.logging.LoggingSupport$1.run;54;;
Class.forName;javax.management.ObjectName;sun.management.MappedMXBeanType.<clinit>;805;;
Class.forName;org.apache.batik.apps.rasterizer.Main;org.dacapo.harness.Batik.<init>;28;;
Class.forName;org.apache.batik.css.parser.Parser;org.apache.batik.dom.ExtensibleDOMImplementation.createCSSEngine;127;;
Class.forName;org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter;org.apache.batik.transcoder.image.PNGTranscoder.getWriteAdapter;65;;
Class.forName;org.apache.crimson.jaxp.SAXParserFactoryImpl;java.util.ServiceLoader$LazyIterator.nextService;370;;
Class.forName;org.apache.crimson.parser.Parser2;org.apache.crimson.parser.Parser2$Catalog.class$;3306;;
Class.forName;org.dacapo.harness.Batik;org.dacapo.harness.TestHarness.findClass;249;;
Class.forName;sun.awt.X11.XToolkit;java.awt.Toolkit$2.run;860;;
Class.forName;sun.awt.X11FontManager;sun.font.FontManagerFactory$1.run;82;;
Class.forName;sun.awt.X11GraphicsEnvironment;java.awt.GraphicsEnvironment.createGE;103;;
Class.forName;sun.font.FreetypeFontScaler;sun.font.FontScaler.<clinit>;98;;
Class.forName;sun.java2d.jules.JulesRenderingEngine;java.util.ServiceLoader$LazyIterator.nextService;370;;
Class.forName;sun.java2d.marlin.MarlinRenderingEngine;java.util.ServiceLoader$LazyIterator.nextService;370;;
Class.forName;sun.java2d.pisces.PiscesRenderingEngine;java.util.ServiceLoader$LazyIterator.nextService;370;;
Class.forName;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1223;;
Class.forName;sun.nio.fs.LinuxFileSystemProvider;sun.nio.fs.DefaultFileSystemProvider.createProvider;43;;
Class.forName;sun.security.provider.NativePRNG;java.security.Provider$Service.getImplClass;1634;;
Class.forName;sun.security.provider.SHA;java.security.Provider$Service.getImplClass;1634;;
Class.forName;sun.util.logging.PlatformLogger$DefaultLoggerProxy;sun.util.logging.PlatformLogger.<clinit>;173;;
Class.forName;sun.util.logging.PlatformLogger$JavaLoggerProxy;sun.util.logging.PlatformLogger.<clinit>;176;;
Class.getDeclaredField;<com.sun.management.GcInfo: java.lang.Object[] extAttributes>;sun.management.GcInfoCompositeData$2.run;88;isAccessible=false;
Class.getDeclaredField;<com.sun.management.GcInfo: sun.management.GcInfoBuilder builder>;sun.management.GarbageCollectionNotifInfoCompositeData$1.run;69;isAccessible=false;
Class.getDeclaredField;<com.sun.management.GcInfo: sun.management.GcInfoBuilder builder>;sun.management.GcInfoCompositeData$1.run;76;isAccessible=false;
Class.getDeclaredField;<java.lang.Thread: int threadLocalRandomProbe>;java.util.concurrent.locks.LockSupport.<clinit>;408;isAccessible=false;
Class.getDeclaredField;<java.lang.Thread: int threadLocalRandomSecondarySeed>;java.util.concurrent.locks.LockSupport.<clinit>;410;isAccessible=false;
Class.getDeclaredField;<java.lang.Thread: java.lang.Object parkBlocker>;java.util.concurrent.locks.LockSupport.<clinit>;404;isAccessible=false;
Class.getDeclaredField;<java.lang.Thread: long threadLocalRandomSeed>;java.util.concurrent.locks.LockSupport.<clinit>;406;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;790;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;790;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;790;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.CallSite: java.lang.invoke.MethodHandle target>;java.lang.invoke.CallSite.<clinit>;252;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.MethodHandle: java.lang.invoke.LambdaForm form>;java.lang.invoke.MethodHandle.<clinit>;1451;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.MethodType: java.lang.Class rtype>;java.lang.invoke.MethodType.<clinit>;1167;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.MethodType: java.lang.Class[] ptypes>;java.lang.invoke.MethodType.<clinit>;1169;isAccessible=false;
Class.getDeclaredField;<java.net.Inet6Address: java.net.Inet6Address$Inet6AddressHolder holder6>;java.net.Inet6Address.<clinit>;585;isAccessible=false;
Class.getDeclaredField;<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder>;java.net.InetAddress.<clinit>;1591;isAccessible=false;
Class.getDeclaredField;<java.util.Random: java.util.concurrent.atomic.AtomicLong seed>;java.util.Random.<clinit>;1221;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;java.util.concurrent.ConcurrentLinkedQueue$Node.<clinit>;215;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.ConcurrentLinkedQueue$Node: java.util.concurrent.ConcurrentLinkedQueue$Node next>;java.util.concurrent.ConcurrentLinkedQueue$Node.<clinit>;217;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head>;java.util.concurrent.ConcurrentLinkedQueue.<clinit>;941;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail>;java.util.concurrent.ConcurrentLinkedQueue.<clinit>;943;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;java.util.concurrent.CopyOnWriteArrayList.<clinit>;1687;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode match>;java.util.concurrent.SynchronousQueue$TransferStack$SNode.<clinit>;293;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;java.util.concurrent.SynchronousQueue$TransferStack$SNode.<clinit>;295;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode head>;java.util.concurrent.SynchronousQueue$TransferStack.<clinit>;518;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2276;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2278;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: int state>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2270;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2272;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2274;isAccessible=false;
Class.getDeclaredField;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.util.logging.LoggingSupport$1.run;55;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle getTarget()>;java.lang.invoke.DelegatingMethodHandle.<clinit>;159;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.Object checkReceiver(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;722;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object allocateInstance(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;718;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkBase(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;710;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object,java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;716;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object constructorMethod(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;720;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberName(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;702;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberNameEnsureInit(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;704;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object staticBase(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;712;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: long fieldOffset(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;708;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: long staticOffset(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;714;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: void ensureInitialized(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;706;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: java.lang.Object checkGenericType(java.lang.Object,java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;425;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: java.lang.Object getCallSiteTarget(java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;427;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: void checkCustomized(java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;429;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: void checkExactType(java.lang.Object,java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;423;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: boolean profileBoolean(boolean,int[])>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;618;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: java.lang.Object guardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle,java.lang.Object[])>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;615;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: sun.invoke.empty.Empty throwException(java.lang.Throwable)>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;617;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: void checkSpreadArgument(java.lang.Object,int)>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;614;isAccessible=false;
Class.getDeclaredMethod;<org.dacapo.harness.TestHarness: void main(java.lang.String[])>;Harness.main;;isAccessible=false;
Class.getField;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3479;isAccessible=false;
Class.getField;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3479;isAccessible=false;
Class.getField;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3479;isAccessible=false;
Class.getField;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3479;isAccessible=false;
Class.getField;<java.lang.Boolean: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;818;isAccessible=false;
Class.getField;<java.lang.Byte: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;818;isAccessible=false;
Class.getField;<java.lang.Character: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;818;isAccessible=false;
Class.getField;<java.lang.Double: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;818;isAccessible=false;
Class.getField;<java.lang.Float: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;818;isAccessible=false;
Class.getField;<java.lang.Integer: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;818;isAccessible=false;
Class.getField;<java.lang.Long: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;818;isAccessible=false;
Class.getField;<java.lang.Short: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;818;isAccessible=false;
Class.getField;<java.lang.Void: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;818;isAccessible=false;
Class.getMethod;<Harness: void main(java.lang.String[])>;sun.launcher.LauncherHelper.validateMainClass;650;isAccessible=false;
Class.getMethod;<com.sun.management.GcInfo: java.util.Map getMemoryUsageBeforeGc()>;sun.management.GcInfoCompositeData.<clinit>;172;isAccessible=false;
Class.getMethod;<java.lang.UNIXProcess$LaunchMechanism: java.lang.UNIXProcess$LaunchMechanism[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.getMethod;<java.lang.management.MemoryUsage: java.lang.management.MemoryUsage from(javax.management.openmbean.CompositeData)>;sun.management.MappedMXBeanType$CompositeDataMXBeanType$1.run;618;isAccessible=false;
Class.getMethod;<java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.getMethod;<java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFileSuffixes()>;javax.imageio.ImageIO.<clinit>;668;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFileSuffixes()>;javax.imageio.ImageIO.<clinit>;675;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFormatNames()>;javax.imageio.ImageIO.<clinit>;666;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFormatNames()>;javax.imageio.ImageIO.<clinit>;673;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getMIMETypes()>;javax.imageio.ImageIO.<clinit>;670;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getMIMETypes()>;javax.imageio.ImageIO.<clinit>;677;isAccessible=false;
Class.getMethod;<org.apache.batik.apps.rasterizer.Main: void execute()>;org.dacapo.harness.Batik.<init>;29;isAccessible=false;
Class.getMethod;<sun.font.EAttribute: sun.font.EAttribute[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.getMethods;java.lang.management.MemoryUsage;sun.management.MappedMXBeanType$CompositeDataMXBeanType$2.run;639;;
Class.newInstance;java.awt.EventQueue;sun.awt.SunToolkit.initEQ;123;;
Class.newInstance;java.net.Inet6AddressImpl;java.net.InetAddress.loadImpl;1551;;
Class.newInstance;org.GNOME.Accessibility.AtkWrapper;java.awt.Toolkit.loadAssistiveTechnologies;805;;
Class.newInstance;org.apache.batik.bridge.RhinoInterpreterFactory;org.apache.batik.util.Service.providers;123;;
Class.newInstance;org.apache.batik.css.parser.Parser;org.apache.batik.dom.ExtensibleDOMImplementation.createCSSEngine;127;;
Class.newInstance;org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGRegistryEntry;org.apache.batik.util.Service.providers;123;;
Class.newInstance;org.apache.batik.ext.awt.image.codec.imageio.ImageIOPNGRegistryEntry;org.apache.batik.util.Service.providers;123;;
Class.newInstance;org.apache.batik.ext.awt.image.codec.imageio.ImageIOTIFFRegistryEntry;org.apache.batik.util.Service.providers;123;;
Class.newInstance;org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter;org.apache.batik.transcoder.image.PNGTranscoder.getWriteAdapter;66;;
Class.newInstance;org.apache.batik.extension.svg.BatikBridgeExtension;org.apache.batik.util.Service.providers;123;;
Class.newInstance;org.apache.batik.extension.svg.BatikDomExtension;org.apache.batik.util.Service.providers;123;;
Class.newInstance;org.apache.crimson.jaxp.SAXParserFactoryImpl;java.util.ServiceLoader$LazyIterator.nextService;380;;
Class.newInstance;sun.awt.X11.XToolkit;java.awt.Toolkit$2.run;873;;
Class.newInstance;sun.awt.X11FontManager;sun.font.FontManagerFactory$1.run;83;;
Class.newInstance;sun.awt.X11GraphicsEnvironment;java.awt.GraphicsEnvironment.createGE;110;;
Class.newInstance;sun.awt.resources.awt;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;sun.java2d.jules.JulesRenderingEngine;java.util.ServiceLoader$LazyIterator.nextService;380;;
Class.newInstance;sun.java2d.marlin.MarlinRenderingEngine;java.util.ServiceLoader$LazyIterator.nextService;380;;
Class.newInstance;sun.java2d.pisces.PiscesRenderingEngine;java.util.ServiceLoader$LazyIterator.nextService;380;;
Class.newInstance;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1232;;
Class.newInstance;sun.nio.fs.LinuxFileSystemProvider;sun.nio.fs.DefaultFileSystemProvider.createProvider;48;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$454f02ec7b82eb2edbfcbc04210e2e665d131bc2;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.security.provider.Sun;sun.security.jca.ProviderConfig$2.run;221;;
Class.newInstance;sun.util.logging.resources.logging;java.util.ResourceBundle$Control.newBundle;2662;;
Constructor.getModifiers;<java.awt.EventQueue: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<java.net.Inet6AddressImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.GNOME.Accessibility.AtkWrapper: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.batik.bridge.RhinoInterpreterFactory: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.batik.css.parser.Parser: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGRegistryEntry: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.batik.ext.awt.image.codec.imageio.ImageIOPNGRegistryEntry: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.batik.ext.awt.image.codec.imageio.ImageIOTIFFRegistryEntry: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.batik.extension.svg.BatikBridgeExtension: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.batik.extension.svg.BatikDomExtension: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.crimson.jaxp.SAXParserFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.awt.X11.XToolkit: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.awt.X11FontManager: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.awt.X11GraphicsEnvironment: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.awt.resources.awt: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.java2d.jules.JulesRenderingEngine: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.java2d.marlin.MarlinRenderingEngine: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.java2d.pisces.PiscesRenderingEngine: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.nio.fs.LinuxFileSystemProvider: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$454f02ec7b82eb2edbfcbc04210e2e665d131bc2: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.logging.resources.logging: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<java.awt.EventQueue: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<java.awt.GraphicsEnvironment$$Lambda$1: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<java.lang.UNIXProcess$$Lambda$5: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<java.lang.UNIXProcess$Platform$$Lambda$2: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<java.net.Inet6AddressImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.GNOME.Accessibility.AtkWrapper: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.batik.apps.rasterizer.Main: void <init>(java.lang.String[])>;org.dacapo.harness.Batik.iterate;40;isAccessible=false;
Constructor.newInstance;<org.apache.batik.bridge.RhinoInterpreterFactory: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.batik.css.parser.Parser: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.batik.ext.awt.image.codec.imageio.ImageIOJPEGRegistryEntry: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.batik.ext.awt.image.codec.imageio.ImageIOPNGRegistryEntry: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.batik.ext.awt.image.codec.imageio.ImageIOTIFFRegistryEntry: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.batik.ext.awt.image.codec.png.PNGTranscoderInternalCodecWriteAdapter: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.batik.extension.svg.BatikBridgeExtension: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.batik.extension.svg.BatikDomExtension: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.crimson.jaxp.SAXParserFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.dacapo.harness.Batik: void <init>(org.dacapo.parser.Config,java.io.File)>;org.dacapo.harness.TestHarness.runBenchmark;193;isAccessible=false;
Constructor.newInstance;<sun.awt.X11.XToolkit: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.awt.X11FontManager: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.awt.X11GraphicsEnvironment: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.awt.resources.awt: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.font.FreetypeFontScaler: void <init>(sun.font.Font2D,int,boolean,int)>;sun.font.FontScaler.getScaler;128;isAccessible=false;
Constructor.newInstance;<sun.java2d.Disposer$$Lambda$9: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<sun.java2d.jules.JulesRenderingEngine: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.java2d.marlin.MarlinRenderingEngine: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.java2d.pisces.PiscesRenderingEngine: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.nio.fs.LinuxFileSystemProvider: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$454f02ec7b82eb2edbfcbc04210e2e665d131bc2: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.security.provider.NativePRNG: void <init>()>;java.security.Provider$Service.newInstance;1595;isAccessible=false;
Constructor.newInstance;<sun.security.provider.SHA: void <init>()>;java.security.Provider$Service.newInstance;1595;isAccessible=false;
Constructor.newInstance;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.logging.resources.logging: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Field.get*;<com.sun.management.GcInfo: java.lang.Object[] extAttributes>;sun.management.GcInfoCompositeData$2.run;90;isAccessible=true;
Field.get*;<com.sun.management.GcInfo: sun.management.GcInfoBuilder builder>;sun.management.GarbageCollectionNotifInfoCompositeData$1.run;71;isAccessible=true;
Field.get*;<com.sun.management.GcInfo: sun.management.GcInfoBuilder builder>;sun.management.GcInfoCompositeData$1.run;78;isAccessible=true;
Field.get*;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3480;isAccessible=false;
Field.get*;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3480;isAccessible=false;
Field.get*;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3480;isAccessible=false;
Field.get*;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.text.bidi.BidiBase$TextAttributeConstants.getStaticField;3480;isAccessible=false;
Field.get*;<java.lang.Boolean: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;819;isAccessible=false;
Field.get*;<java.lang.Byte: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;819;isAccessible=false;
Field.get*;<java.lang.Character: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;819;isAccessible=false;
Field.get*;<java.lang.Double: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;819;isAccessible=false;
Field.get*;<java.lang.Float: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;819;isAccessible=false;
Field.get*;<java.lang.Integer: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;819;isAccessible=false;
Field.get*;<java.lang.Long: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;819;isAccessible=false;
Field.get*;<java.lang.Short: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;819;isAccessible=false;
Field.get*;<java.lang.Void: java.lang.Class TYPE>;sun.management.MappedMXBeanType.<clinit>;819;isAccessible=false;
Field.get*;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.util.logging.LoggingSupport$1.run;57;isAccessible=true;
Field.getDeclaringClass;<com.sun.management.GcInfo: java.lang.Object[] extAttributes>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<com.sun.management.GcInfo: sun.management.GcInfoBuilder builder>;sun.reflect.UnsafeFieldAccessorImpl.ensureObj;57;isAccessible=true;
Field.getDeclaringClass;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.Boolean: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.Byte: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.Character: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.Double: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.Float: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.Integer: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.Long: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.Short: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.Void: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=true;
Field.getModifiers;<com.sun.management.GcInfo: java.lang.Object[] extAttributes>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.sun.management.GcInfo: java.lang.Object[] extAttributes>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.sun.management.GcInfo: java.lang.Object[] extAttributes>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.sun.management.GcInfo: java.lang.Object[] extAttributes>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.sun.management.GcInfo: java.lang.Object[] extAttributes>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<com.sun.management.GcInfo: sun.management.GcInfoBuilder builder>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<com.sun.management.GcInfo: sun.management.GcInfoBuilder builder>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<com.sun.management.GcInfo: sun.management.GcInfoBuilder builder>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<com.sun.management.GcInfo: sun.management.GcInfoBuilder builder>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<com.sun.management.GcInfo: sun.management.GcInfoBuilder builder>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.Boolean: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.Boolean: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.Boolean: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.Boolean: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.Boolean: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.Byte: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.Byte: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.Byte: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.Byte: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.Byte: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.Character: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.Character: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.Character: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.Character: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.Character: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.Double: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.Double: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.Double: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.Double: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.Double: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.Float: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.Float: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.Float: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.Float: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.Float: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.Integer: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.Integer: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.Integer: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.Integer: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.Integer: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.Long: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.Long: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.Long: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.Long: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.Long: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.Short: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.Short: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.Short: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.Short: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.Short: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.Void: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.Void: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.Void: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.Void: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.Void: java.lang.Class TYPE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getName;<com.sun.management.GcInfo: java.lang.Object[] extAttributes>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<com.sun.management.GcInfo: java.util.Map usageAfterGc>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<com.sun.management.GcInfo: java.util.Map usageBeforeGc>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<com.sun.management.GcInfo: javax.management.openmbean.CompositeData cdata>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<com.sun.management.GcInfo: long endTime>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<com.sun.management.GcInfo: long index>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<com.sun.management.GcInfo: long startTime>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<com.sun.management.GcInfo: sun.management.GcInfoBuilder builder>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BACKGROUND>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute CHAR_REPLACEMENT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute FAMILY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute FONT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute FOREGROUND>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute INPUT_METHOD_HIGHLIGHT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute INPUT_METHOD_UNDERLINE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute JUSTIFICATION>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute NUMERIC_SHAPING>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute POSTURE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute SIZE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute STRIKETHROUGH>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute SUPERSCRIPT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute SWAP_COLORS>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute TRANSFORM>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute UNDERLINE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute WEIGHT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.awt.font.TextAttribute WIDTH>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_RTL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Boolean STRIKETHROUGH_ON>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Boolean SWAP_COLORS_ON>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float JUSTIFICATION_FULL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float JUSTIFICATION_NONE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float POSTURE_OBLIQUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float POSTURE_REGULAR>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_BOLD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_DEMIBOLD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_DEMILIGHT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_EXTRABOLD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_EXTRA_LIGHT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_HEAVY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_LIGHT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_MEDIUM>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_REGULAR>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_SEMIBOLD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WEIGHT_ULTRABOLD>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WIDTH_CONDENSED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WIDTH_EXTENDED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WIDTH_REGULAR>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WIDTH_SEMI_CONDENSED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Float WIDTH_SEMI_EXTENDED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer SUPERSCRIPT_SUB>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer SUPERSCRIPT_SUPER>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_LOW_DASHED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_LOW_DOTTED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_LOW_GRAY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_LOW_ONE_PIXEL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_LOW_TWO_PIXEL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.awt.font.TextAttribute: java.lang.Integer UNDERLINE_ON>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Boolean: java.lang.Boolean FALSE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Boolean: java.lang.Boolean TRUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Boolean: java.lang.Class TYPE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Byte: byte MAX_VALUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Byte: byte MIN_VALUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Byte: java.lang.Class TYPE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Character: char MAX_VALUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Character: char MIN_VALUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Character: int MAX_RADIX>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Character: int MIN_RADIX>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Character: java.lang.Class TYPE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Double: double MAX_VALUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Double: double MIN_NORMAL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Double: double MIN_VALUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Double: double NEGATIVE_INFINITY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Double: double NaN>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Double: double POSITIVE_INFINITY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Double: int BYTES>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Double: int MAX_EXPONENT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Double: int MIN_EXPONENT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Double: int SIZE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Double: java.lang.Class TYPE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Float: float MAX_VALUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Float: float MIN_NORMAL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Float: float MIN_VALUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Float: float NEGATIVE_INFINITY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Float: float NaN>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Float: float POSITIVE_INFINITY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Float: int BYTES>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Float: int MAX_EXPONENT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Float: int MIN_EXPONENT>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Float: int SIZE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Float: java.lang.Class TYPE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Integer: int MAX_VALUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Integer: int MIN_VALUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Integer: java.lang.Class TYPE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Long: java.lang.Class TYPE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Long: long MAX_VALUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Long: long MIN_VALUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Short: java.lang.Class TYPE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Short: short MAX_VALUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Short: short MIN_VALUE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: boolean daemon>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: boolean single_step>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: boolean stillborn>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int MAX_PRIORITY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int MIN_PRIORITY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int NORM_PRIORITY>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int priority>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int threadInitNumber>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int threadLocalRandomProbe>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int threadLocalRandomSecondarySeed>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: int threadStatus>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.ClassLoader contextClassLoader>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.Object blockerLock>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.Object parkBlocker>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.Runnable target>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.RuntimePermission SUBCLASS_IMPLEMENTATION_PERMISSION>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.StackTraceElement[] EMPTY_STACK_TRACE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.String name>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.Thread threadQ>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler defaultUncaughtExceptionHandler>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.ThreadGroup group>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap inheritableThreadLocals>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.lang.ThreadLocal$ThreadLocalMap threadLocals>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: java.security.AccessControlContext inheritedAccessControlContext>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: long eetop>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: long nativeParkEventPointer>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: long stackSize>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: long threadLocalRandomSeed>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: long threadSeqNumber>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: long tid>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Thread: sun.nio.ch.Interruptible blocker>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.Void: java.lang.Class TYPE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.CallSite: java.lang.invoke.MethodHandle target>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodHandle: java.lang.invoke.LambdaForm form>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodHandle: java.lang.invoke.MethodType type>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodType: java.lang.Class rtype>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodType: java.lang.Class[] ptypes>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodType: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.Inet6Address: int INADDRSZ>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.Inet6Address: int cached_scope_id>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.Inet6Address: java.net.Inet6Address$Inet6AddressHolder holder6>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.InetAddress: boolean preferIPv6Address>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.InetAddress: int IPv4>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.InetAddress: int IPv6>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.Random: java.util.concurrent.atomic.AtomicLong seed>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.Random: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentLinkedQueue$Node: java.lang.Object item>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentLinkedQueue$Node: java.util.concurrent.ConcurrentLinkedQueue$Node next>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node head>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentLinkedQueue: java.util.concurrent.ConcurrentLinkedQueue$Node tail>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.ConcurrentLinkedQueue: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.CopyOnWriteArrayList: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode match>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.SynchronousQueue$TransferStack$SNode: java.util.concurrent.SynchronousQueue$TransferStack$SNode next>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.SynchronousQueue$TransferStack: int DATA>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.SynchronousQueue$TransferStack: int FULFILLING>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.SynchronousQueue$TransferStack: int REQUEST>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.SynchronousQueue$TransferStack: java.util.concurrent.SynchronousQueue$TransferStack$SNode head>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int CANCELLED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int CONDITION>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int PROPAGATE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int SIGNAL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node EXCLUSIVE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node SHARED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: int state>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;java.lang.Class.searchFields;;isAccessible=false;
Field.set*;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;792;isAccessible=false;
Field.set*;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;792;isAccessible=false;
Field.set*;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;792;isAccessible=false;
Method.getDeclaringClass;<com.sun.management.GcInfo: java.util.Map getMemoryUsageBeforeGc()>;sun.reflect.generics.factory.CoreReflectionFactory.getDeclsLoader;64;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: int hashCode()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: int hashCode()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.Class getClass()>;sun.reflect.generics.factory.CoreReflectionFactory.getDeclsLoader;64;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: java.lang.String toString()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notify()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notify()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notifyAll()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void notifyAll()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.management.MemoryUsage: java.lang.String toString()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.management.MemoryUsage: java.lang.String toString()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.management.MemoryUsage: java.lang.management.MemoryUsage from(javax.management.openmbean.CompositeData)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.management.MemoryUsage: long getCommitted()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.management.MemoryUsage: long getCommitted()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.management.MemoryUsage: long getInit()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.management.MemoryUsage: long getInit()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.management.MemoryUsage: long getMax()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.management.MemoryUsage: long getMax()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<java.lang.management.MemoryUsage: long getUsed()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getDeclaringClass;<java.lang.management.MemoryUsage: long getUsed()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getDeclaringClass;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getMIMETypes()>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getMIMETypes()>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getModifiers;<Harness: void main(java.lang.String[])>;sun.launcher.LauncherHelper.validateMainClass;663;isAccessible=false;
Method.getModifiers;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: int hashCode()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: int hashCode()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.Class getClass()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.String toString()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: java.lang.String toString()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notify()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notify()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notifyAll()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void notifyAll()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait()>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long,int)>;java.lang.Class.privateGetPublicMethods;;isAccessible=false;
Method.getModifiers;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.management.MemoryUsage: java.lang.String toString()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.management.MemoryUsage: java.lang.management.MemoryUsage from(javax.management.openmbean.CompositeData)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.management.MemoryUsage: long getCommitted()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.management.MemoryUsage: long getInit()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.management.MemoryUsage: long getMax()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<java.lang.management.MemoryUsage: long getUsed()>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getMIMETypes()>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getName;<Harness: void main(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: boolean containsKey(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: boolean containsValue(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: boolean equals(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: com.sun.management.GcInfo from(javax.management.openmbean.CompositeData)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: int hashCode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: java.lang.Object get(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: java.lang.Object[] getAll(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: java.util.Collection values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: java.util.Map getMemoryUsageAfterGc()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: java.util.Map getMemoryUsageBeforeGc()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: javax.management.openmbean.CompositeData toCompositeData(javax.management.openmbean.CompositeType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: javax.management.openmbean.CompositeType getCompositeType()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: long getDuration()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: long getEndTime()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: long getId()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<com.sun.management.GcInfo: long getStartTime()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: boolean equals(java.lang.Object)>;sun.management.MappedMXBeanType$CompositeDataMXBeanType.<init>;650;isAccessible=false;
Method.getName;<java.lang.Object: int hashCode()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: int hashCode()>;sun.management.MappedMXBeanType$CompositeDataMXBeanType.<init>;650;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.Class getClass()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.Class getClass()>;sun.management.MappedMXBeanType$CompositeDataMXBeanType.<init>;650;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.String toString()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<java.lang.Object: void notify()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void notify()>;sun.management.MappedMXBeanType$CompositeDataMXBeanType.<init>;650;isAccessible=false;
Method.getName;<java.lang.Object: void notifyAll()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void notifyAll()>;sun.management.MappedMXBeanType$CompositeDataMXBeanType.<init>;650;isAccessible=false;
Method.getName;<java.lang.Object: void wait()>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void wait()>;sun.management.MappedMXBeanType$CompositeDataMXBeanType.<init>;650;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long)>;sun.management.MappedMXBeanType$CompositeDataMXBeanType.<init>;650;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long,int)>;java.lang.reflect.Method.equals;;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long,int)>;sun.management.MappedMXBeanType$CompositeDataMXBeanType.<init>;650;isAccessible=false;
Method.getName;<java.lang.UNIXProcess$LaunchMechanism: java.lang.UNIXProcess$LaunchMechanism valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.UNIXProcess$LaunchMechanism: java.lang.UNIXProcess$LaunchMechanism[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: boolean isInvokeSpecial()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.Class internalCallerClass()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.String internalProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.BoundMethodHandle rebind()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.LambdaForm chooseDelegatingForm(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.LambdaForm makeReinvokerForm(java.lang.invoke.MethodHandle,int,java.lang.Object,java.lang.String,boolean,java.lang.invoke.LambdaForm$NamedFunction,java.lang.invoke.LambdaForm$NamedFunction)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.LambdaForm makeReinvokerForm(java.lang.invoke.MethodHandle,int,java.lang.Object,java.lang.invoke.LambdaForm$NamedFunction)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MemberName internalMemberName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle asTypeUncached(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle getTarget()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle getTarget()>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.Object checkReceiver(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.Object checkReceiver(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.Object internalProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: boolean checkInitialized(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: boolean shouldBeInitialized(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: int afIndex(byte,boolean,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: int ftypeKind(java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object allocateInstance(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object allocateInstance(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkBase(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkBase(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object,java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object constructorMethod(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object constructorMethod(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object findDirectMethodHandle(java.lang.invoke.LambdaForm$Name)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberName(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberName(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberNameEnsureInit(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberNameEnsureInit(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object nullCheck(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object staticBase(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object staticBase(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.String internalProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.BoundMethodHandle rebind()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(byte,java.lang.Class,java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.Class,java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.reflect.Field)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.reflect.Method)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle makeAllocator(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm makePreparedFieldLambdaForm(byte,boolean,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm makePreparedLambdaForm(java.lang.invoke.MethodType,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedFieldLambdaForm(byte,boolean,java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedFieldLambdaForm(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedLambdaForm(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedLambdaForm(java.lang.invoke.MethodType,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.MemberName internalMemberName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long fieldOffset(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long fieldOffset(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long staticOffset(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long staticOffset(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void ensureInitialized()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void ensureInitialized(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void ensureInitialized(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void maybeCompile(java.lang.invoke.LambdaForm,java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: boolean checkInvoker(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Class impliedRestargType(java.lang.invoke.MethodType,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object checkGenericType(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object checkGenericType(java.lang.Object,java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object getCallSiteTarget(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object getCallSiteTarget(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.LambdaForm callSiteForm(java.lang.invoke.MethodType,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.LambdaForm invokeHandleForm(java.lang.invoke.MethodType,boolean,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName invokeBasicMethod(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName linkToCallSiteMethod(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName linkToTargetMethod(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName methodHandleInvokeLinkerMethod(java.lang.String,java.lang.invoke.MethodType,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle basicInvoker()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle cachedInvoker(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle exactInvoker()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle genericInvoker()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle makeExactOrGeneralInvoker(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle setCachedInvoker(int,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle spreadInvoker(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.WrongMethodTypeException newWrongMethodTypeException(java.lang.invoke.MethodType,java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkCustomized(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkCustomized(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkExactType(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkExactType(java.lang.Object,java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void maybeCompileToBytecode(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void maybeCustomize(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: boolean assertCorrectArity(java.lang.invoke.MethodHandle,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: boolean profileBoolean(boolean,int[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: boolean profileBoolean(boolean,int[])>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: int countNonNull(java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.ClassCastException newClassCastException(java.lang.Class,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object castReference(java.lang.Class,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object copyAsPrimitiveArray(sun.invoke.util.Wrapper,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object guardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object guardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle,java.lang.Object[])>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object valueConversion(java.lang.Class,java.lang.Class,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] computeValueConversions(java.lang.invoke.MethodType,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillNewArray(java.lang.Integer,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillNewTypedArray(java.lang.Object[],java.lang.Integer,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] identity(java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] makeArray(java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] prepend(java.lang.Object,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.LambdaForm makeGuardWithCatchForm(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.LambdaForm makeGuardWithTestForm(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle bindCaller(java.lang.invoke.MethodHandle,java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle buildArrayProducer(java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle buildFiller(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle buildVarargsArray(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle fakeMethodHandleInvoke(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle fillToRight(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle findCollector(java.lang.String,int,java.lang.Class,java.lang.Class[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeArrayElementAccessor(java.lang.Class,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeBlockInlningWrapper(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeCollectArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,int,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeGuardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeGuardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeIntrinsic(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandleImpl$Intrinsic)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeIntrinsic(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm,java.lang.invoke.MethodHandleImpl$Intrinsic)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvert(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvert(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvertByEditor(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvertIndirect(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeSpreadArguments(java.lang.invoke.MethodHandle,java.lang.Class,int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeVarargsCollector(java.lang.invoke.MethodHandle,java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeWrappedMember(java.lang.invoke.MethodHandle,java.lang.invoke.MemberName,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle profile(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle selectAlternative(boolean,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle throwException(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle varargsArray(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle varargsArray(java.lang.Class,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] access$000()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] access$100()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] makeArrays()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] makeFillArrays()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: sun.invoke.empty.Empty throwException(java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: sun.invoke.empty.Empty throwException(java.lang.Throwable)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void assertSame(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void checkSpreadArgument(java.lang.Object,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void checkSpreadArgument(java.lang.Object,int)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void fillWithArguments(java.lang.Object[],int,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void initStatics()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.management.MemoryUsage: java.lang.String toString()>;java.lang.Class$MethodArray.matchesNameAndDescriptor;2819;isAccessible=false;
Method.getName;<java.lang.management.MemoryUsage: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.management.MemoryUsage: java.lang.String toString()>;sun.management.MappedMXBeanType$CompositeDataMXBeanType.<init>;650;isAccessible=false;
Method.getName;<java.lang.management.MemoryUsage: java.lang.management.MemoryUsage from(javax.management.openmbean.CompositeData)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.management.MemoryUsage: java.lang.management.MemoryUsage from(javax.management.openmbean.CompositeData)>;sun.management.MappedMXBeanType$CompositeDataMXBeanType.<init>;650;isAccessible=false;
Method.getName;<java.lang.management.MemoryUsage: long getCommitted()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.management.MemoryUsage: long getCommitted()>;sun.management.MappedMXBeanType$CompositeDataMXBeanType.<init>;650;isAccessible=false;
Method.getName;<java.lang.management.MemoryUsage: long getInit()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.management.MemoryUsage: long getInit()>;sun.management.MappedMXBeanType$CompositeDataMXBeanType.<init>;650;isAccessible=false;
Method.getName;<java.lang.management.MemoryUsage: long getMax()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.management.MemoryUsage: long getMax()>;sun.management.MappedMXBeanType$CompositeDataMXBeanType.<init>;650;isAccessible=false;
Method.getName;<java.lang.management.MemoryUsage: long getUsed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.management.MemoryUsage: long getUsed()>;sun.management.MappedMXBeanType$CompositeDataMXBeanType.<init>;650;isAccessible=false;
Method.getName;<java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: boolean canDecodeInput(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: boolean isOwnReader(javax.imageio.ImageReader)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: java.lang.Class[] getInputTypes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: java.lang.String[] getImageWriterSpiNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: javax.imageio.ImageReader createReaderInstance()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: javax.imageio.ImageReader createReaderInstance(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: boolean isStandardImageMetadataFormatSupported()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: boolean isStandardStreamMetadataFormatSupported()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String getNativeImageMetadataFormatName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String getNativeStreamMetadataFormatName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String getPluginClassName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getExtraImageMetadataFormatNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getExtraStreamMetadataFormatNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFileSuffixes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFormatNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getMIMETypes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getMIMETypes()>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: javax.imageio.metadata.IIOMetadataFormat getImageMetadataFormat(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: javax.imageio.metadata.IIOMetadataFormat getStreamMetadataFormat(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: boolean canEncodeImage(java.awt.image.RenderedImage)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: boolean canEncodeImage(javax.imageio.ImageTypeSpecifier)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: boolean isFormatLossless()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: boolean isOwnWriter(javax.imageio.ImageWriter)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: java.lang.Class[] getOutputTypes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: java.lang.String[] getImageReaderSpiNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: javax.imageio.ImageWriter createWriterInstance()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: javax.imageio.ImageWriter createWriterInstance(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.batik.apps.rasterizer.Main: boolean proceedOnSourceTranscodingFailure(org.apache.batik.apps.rasterizer.SVGConverterSource,java.io.File,java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.batik.apps.rasterizer.Main: boolean proceedWithComputedTask(org.apache.batik.transcoder.Transcoder,java.util.Map,java.util.List,java.util.List)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.batik.apps.rasterizer.Main: boolean proceedWithSourceTranscoding(org.apache.batik.apps.rasterizer.SVGConverterSource,java.io.File)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.batik.apps.rasterizer.Main: void execute()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.batik.apps.rasterizer.Main: void main(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.batik.apps.rasterizer.Main: void onSourceTranscodingSuccess(org.apache.batik.apps.rasterizer.SVGConverterSource,java.io.File)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.batik.apps.rasterizer.Main: void validateConverterConfig(org.apache.batik.apps.rasterizer.SVGConverter)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: boolean isValidSize(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: boolean isValidThreadCount(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: double coeff_of_var(long[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: java.lang.Class findClass()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: java.lang.String getBuildNickName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: java.lang.String getBuildVersion()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void bmInfo(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void bmSizes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void dump(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void main(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void makeCleanScratch(java.io.File)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void rmdir(java.io.File)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void runBenchmark(java.io.File,java.lang.String,org.dacapo.harness.TestHarness)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void setBuildInfo()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: sun.font.EAttribute forAttribute(java.text.AttributedCharacterIterator$Attribute)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: sun.font.EAttribute valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: sun.font.EAttribute[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.invoke;<java.lang.UNIXProcess$LaunchMechanism: java.lang.UNIXProcess$LaunchMechanism[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
Method.invoke;<java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
Method.invoke;<java.nio.file.attribute.PosixFilePermission: java.nio.file.attribute.PosixFilePermission[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
Method.invoke;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getMIMETypes()>;javax.imageio.ImageIO$ContainsFilter.filter;613;isAccessible=false;
Method.invoke;<org.apache.batik.apps.rasterizer.Main: void execute()>;org.dacapo.harness.Batik.iterate;41;isAccessible=false;
Method.invoke;<org.dacapo.harness.TestHarness: void main(java.lang.String[])>;Harness.main;;isAccessible=false;
Method.invoke;<sun.font.EAttribute: sun.font.EAttribute[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
