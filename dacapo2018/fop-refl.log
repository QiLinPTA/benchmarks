Array.newInstance;boolean[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Array.newInstance;byte[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Array.newInstance;char[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;char[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Array.newInstance;double[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Array.newInstance;float[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Array.newInstance;int[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;int[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Array.newInstance;java.lang.Class[];java.util.AbstractCollection.toArray;179;;
Array.newInstance;java.lang.Class[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.Class[];java.util.Arrays.copyOfRange;3484;;
Array.newInstance;java.lang.Class[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.Object[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.String[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.invoke.LambdaForm$BasicType[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.invoke.LambdaForm$BasicType[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.invoke.LambdaForm$Name[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.invoke.LambdaForm$Name[];sun.invoke.util.BytecodeDescriptor.parseSig;90;;
Array.newInstance;java.lang.invoke.MethodHandle[];java.util.Arrays.copyOf;3212;;
Array.newInstance;java.lang.reflect.Method[];java.util.Arrays.copyOf;3212;;
Array.newInstance;long[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Array.newInstance;short[];sun.misc.ProxyGenerator$PrimitiveTypeInfo.<init>;1679;;
Class.forName;java.awt.EventQueue;sun.awt.SunToolkit.initEQ;123;;
Class.forName;java.io.IOException;com.sun.proxy.$Proxy$HASHED$b3ddfcf90629c4c6253d7c639fa0634ef5087e6c.<clinit>;;;
Class.forName;java.io.IOException;org.apache.fop.events.model.EventModelParser$Handler.startElement;121;;
Class.forName;java.lang.Boolean;org.apache.fop.events.model.EventModelParser$Handler.startElement;121;;
Class.forName;java.lang.Integer;org.apache.fop.events.model.EventModelParser$Handler.startElement;121;;
Class.forName;java.lang.Object;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;;
Class.forName;java.lang.Object;com.sun.proxy.$Proxy$HASHED$b3ddfcf90629c4c6253d7c639fa0634ef5087e6c.<clinit>;;;
Class.forName;java.lang.String;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;;
Class.forName;java.lang.String;org.apache.commons.logging.impl.LogFactoryImpl.class$;69;;
Class.forName;java.lang.String;org.apache.fop.events.model.EventModelParser$Handler.startElement;121;;
Class.forName;java.lang.Thread;org.apache.commons.logging.LogFactory.class$;220;;
Class.forName;java.security.AccessController;org.apache.xml.serializer.OutputPropertiesFactory.findAccessControllerClass;228;;
Class.forName;java.security.MessageDigestSpi;java.security.Security.getSpiClass;675;;
Class.forName;java.util.logging.LoggingProxyImpl;sun.util.logging.LoggingSupport$1.run;54;;
Class.forName;org.apache.batik.anim.dom.SVGDOMImplementation;org.apache.fop.image.loader.batik.BatikUtil.isBatikAvailable;41;;
Class.forName;org.apache.commons.logging.LogFactory;org.apache.commons.logging.LogFactory.class$;220;;
Class.forName;org.apache.commons.logging.LogFactory;org.apache.commons.logging.impl.LogFactoryImpl.class$;69;;
Class.forName;org.apache.fop.cli.Main;org.dacapo.harness.Fop.<init>;27;;
Class.forName;org.apache.fop.fo.FOElementMapping;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;;
Class.forName;org.apache.fop.fo.extensions.ExtensionElementMapping;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;;
Class.forName;org.apache.fop.fo.extensions.InternalElementMapping;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;;
Class.forName;org.apache.fop.fo.extensions.OldExtensionElementMapping;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;;
Class.forName;org.apache.fop.fo.extensions.svg.BatikExtensionElementMapping;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;;
Class.forName;org.apache.fop.fo.extensions.svg.SVGElementMapping;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;;
Class.forName;org.apache.fop.fo.extensions.xmp.RDFElementMapping;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;;
Class.forName;org.apache.fop.fo.extensions.xmp.XMPElementMapping;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;;
Class.forName;org.apache.fop.layoutmgr.BlockLevelEventProducer;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;;
Class.forName;org.apache.fop.layoutmgr.BlockLevelEventProducer;java.lang.reflect.Proxy$Proxy$HASHED$5d5ab664a5fc1463b2dcc1c15c44a3f1bb071d86.apply;577;;
Class.forName;org.apache.fop.render.RendererEventProducer;com.sun.proxy.$Proxy$HASHED$b3ddfcf90629c4c6253d7c639fa0634ef5087e6c.<clinit>;;;
Class.forName;org.apache.fop.render.RendererEventProducer;java.lang.reflect.Proxy$Proxy$HASHED$5d5ab664a5fc1463b2dcc1c15c44a3f1bb071d86.apply;577;;
Class.forName;org.apache.fop.render.afp.extensions.AFPElementMapping;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;;
Class.forName;org.apache.fop.render.pcl.extensions.PCLElementMapping;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;;
Class.forName;org.apache.fop.render.pdf.extensions.PDFElementMapping;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;;
Class.forName;org.apache.fop.render.ps.extensions.PSExtensionElementMapping;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;;
Class.forName;org.apache.xalan.processor.TransformerFactoryImpl;java.util.ServiceLoader$LazyIterator.nextService;370;;
Class.forName;org.apache.xerces.jaxp.SAXParserFactoryImpl;java.util.ServiceLoader$LazyIterator.nextService;370;;
Class.forName;org.apache.xerces.parsers.ObjectFactory;org.apache.xerces.parsers.ObjectFactory.class$;;;
Class.forName;org.apache.xml.serializer.OutputPropertiesFactory;org.apache.xml.serializer.OutputPropertiesFactory.class$;368;;
Class.forName;org.apache.xml.serializer.SerializerBase;org.apache.xml.serializer.SerializerBase.class$;70;;
Class.forName;org.dacapo.harness.Fop;org.dacapo.harness.TestHarness.findClass;249;;
Class.forName;org.xml.sax.Locator;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;;
Class.forName;org.xml.sax.Locator;org.apache.fop.events.model.EventModelParser$Handler.startElement;121;;
Class.forName;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1223;;
Class.forName;sun.security.provider.SHA;java.security.Provider$Service.getImplClass;1634;;
Class.forName;sun.util.logging.PlatformLogger$DefaultLoggerProxy;sun.util.logging.PlatformLogger.<clinit>;173;;
Class.forName;sun.util.logging.PlatformLogger$JavaLoggerProxy;sun.util.logging.PlatformLogger.<clinit>;176;;
Class.getDeclaredField;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;790;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;790;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;790;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.CallSite: java.lang.invoke.MethodHandle target>;java.lang.invoke.CallSite.<clinit>;252;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.MethodHandle: java.lang.invoke.LambdaForm form>;java.lang.invoke.MethodHandle.<clinit>;1451;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.MethodType: java.lang.Class rtype>;java.lang.invoke.MethodType.<clinit>;1167;isAccessible=false;
Class.getDeclaredField;<java.lang.invoke.MethodType: java.lang.Class[] ptypes>;java.lang.invoke.MethodType.<clinit>;1169;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;java.util.concurrent.CopyOnWriteArrayList.<clinit>;1687;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.atomic.AtomicMarkableReference: java.util.concurrent.atomic.AtomicMarkableReference$Pair pair>;java.util.concurrent.atomic.AtomicMarkableReference.objectFieldOffset;204;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2276;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2278;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: int state>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2270;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2272;isAccessible=false;
Class.getDeclaredField;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;java.util.concurrent.locks.AbstractQueuedSynchronizer.<clinit>;2274;isAccessible=false;
Class.getDeclaredField;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.util.logging.LoggingSupport$1.run;55;isAccessible=false;
Class.getDeclaredMethod;<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>;org.apache.commons.logging.impl.LogFactoryImpl.isJdk14Available;489;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle getTarget()>;java.lang.invoke.DelegatingMethodHandle.<clinit>;159;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.Object checkReceiver(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;722;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object allocateInstance(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;718;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkBase(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;710;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object,java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;716;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object constructorMethod(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;720;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberName(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;702;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberNameEnsureInit(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;704;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: java.lang.Object staticBase(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;712;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: long fieldOffset(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;708;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: long staticOffset(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;714;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.DirectMethodHandle: void ensureInitialized(java.lang.Object)>;java.lang.invoke.DirectMethodHandle$Lazy.<clinit>;706;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: java.lang.Object checkGenericType(java.lang.Object,java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;425;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: java.lang.Object getCallSiteTarget(java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;427;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: void checkCustomized(java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;429;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.Invokers: void checkExactType(java.lang.Object,java.lang.Object)>;java.lang.invoke.Invokers.<clinit>;423;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: boolean profileBoolean(boolean,int[])>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;618;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: java.lang.Object guardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle,java.lang.Object[])>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;615;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: sun.invoke.empty.Empty throwException(java.lang.Throwable)>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;617;isAccessible=false;
Class.getDeclaredMethod;<java.lang.invoke.MethodHandleImpl: void checkSpreadArgument(java.lang.Object,int)>;java.lang.invoke.MethodHandleImpl$Lazy.<clinit>;614;isAccessible=false;
Class.getDeclaredMethod;<org.dacapo.harness.TestHarness: void main(java.lang.String[])>;Harness.main;;isAccessible=false;
Class.getMethod;<Harness: void main(java.lang.String[])>;sun.launcher.LauncherHelper.validateMainClass;650;isAccessible=false;
Class.getMethod;<java.lang.Object: boolean equals(java.lang.Object)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: boolean equals(java.lang.Object)>;com.sun.proxy.$Proxy$HASHED$b3ddfcf90629c4c6253d7c639fa0634ef5087e6c.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: boolean equals(java.lang.Object)>;sun.misc.ProxyGenerator.<clinit>;376;isAccessible=false;
Class.getMethod;<java.lang.Object: int hashCode()>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: int hashCode()>;com.sun.proxy.$Proxy$HASHED$b3ddfcf90629c4c6253d7c639fa0634ef5087e6c.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: int hashCode()>;sun.misc.ProxyGenerator.<clinit>;374;isAccessible=false;
Class.getMethod;<java.lang.Object: java.lang.String toString()>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: java.lang.String toString()>;com.sun.proxy.$Proxy$HASHED$b3ddfcf90629c4c6253d7c639fa0634ef5087e6c.<clinit>;;isAccessible=false;
Class.getMethod;<java.lang.Object: java.lang.String toString()>;sun.misc.ProxyGenerator.<clinit>;377;isAccessible=false;
Class.getMethod;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;org.apache.commons.logging.LogFactory.getContextClassLoader;438;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFileSuffixes()>;javax.imageio.ImageIO.<clinit>;668;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFileSuffixes()>;javax.imageio.ImageIO.<clinit>;675;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFormatNames()>;javax.imageio.ImageIO.<clinit>;666;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFormatNames()>;javax.imageio.ImageIO.<clinit>;673;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getMIMETypes()>;javax.imageio.ImageIO.<clinit>;670;isAccessible=false;
Class.getMethod;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getMIMETypes()>;javax.imageio.ImageIO.<clinit>;677;isAccessible=false;
Class.getMethod;<org.apache.fop.cli.Main: void startFOP(java.lang.String[])>;org.dacapo.harness.Fop.<init>;28;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void flowNotMappingToRegionBody(java.lang.Object,java.lang.String,java.lang.String,org.xml.sax.Locator)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void lastPageMasterReferenceMissing(java.lang.Object,org.xml.sax.Locator)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void layoutHasReachedParts(java.lang.Object,int)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void missingSubsequencesInPageSequenceMaster(java.lang.Object,java.lang.String,org.xml.sax.Locator)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void noMatchingPageMaster(java.lang.Object,java.lang.String,java.lang.String,org.xml.sax.Locator)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void nonRestartableContentFlowingToNarrowerPage(java.lang.Object)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void objectTooWide(java.lang.Object,java.lang.String,int,int,org.xml.sax.Locator)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void overconstrainedAdjustEndIndent(java.lang.Object,java.lang.String,int,org.xml.sax.Locator)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void pageSequenceMasterExhausted(java.lang.Object,java.lang.String,boolean,org.xml.sax.Locator)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void regionOverflow(java.lang.Object,java.lang.String,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void rowTooTall(java.lang.Object,int,int,int,org.xml.sax.Locator)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void staticRegionOverflow(java.lang.Object,java.lang.String,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void tableFixedAutoWidthNotSupported(java.lang.Object,org.xml.sax.Locator)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void viewportBPDOverflow(java.lang.Object,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void viewportIPDOverflow(java.lang.Object,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.render.RendererEventProducer: void endPage(java.lang.Object,int)>;com.sun.proxy.$Proxy$HASHED$b3ddfcf90629c4c6253d7c639fa0634ef5087e6c.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.render.RendererEventProducer: void ioError(java.lang.Object,java.io.IOException)>;com.sun.proxy.$Proxy$HASHED$b3ddfcf90629c4c6253d7c639fa0634ef5087e6c.<clinit>;;isAccessible=false;
Class.getMethod;<org.apache.fop.render.ps.PSRendererOption: org.apache.fop.render.ps.PSRendererOption[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.getMethod;<sun.font.EAttribute: sun.font.EAttribute[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=false;
Class.getMethods;org.apache.fop.layoutmgr.BlockLevelEventProducer;sun.misc.ProxyGenerator.generateClassFile;451;;
Class.getMethods;org.apache.fop.render.RendererEventProducer;sun.misc.ProxyGenerator.generateClassFile;451;;
Class.newInstance;java.awt.EventQueue;sun.awt.SunToolkit.initEQ;123;;
Class.newInstance;org.apache.batik.extension.svg.BatikDomExtension;org.apache.batik.util.Service.providers;123;;
Class.newInstance;org.apache.commons.logging.impl.LogFactoryImpl;org.apache.commons.logging.LogFactory$2.run;531;;
Class.newInstance;org.apache.xalan.processor.TransformerFactoryImpl;java.util.ServiceLoader$LazyIterator.nextService;380;;
Class.newInstance;org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl;org.apache.xerces.impl.dv.ObjectFactory.newInstance;;;
Class.newInstance;org.apache.xerces.jaxp.SAXParserFactoryImpl;java.util.ServiceLoader$LazyIterator.nextService;380;;
Class.newInstance;org.apache.xerces.parsers.SAXParser;org.xml.sax.helpers.NewInstance.newInstance;84;;
Class.newInstance;org.apache.xerces.parsers.XIncludeAwareParserConfiguration;org.apache.xerces.parsers.ObjectFactory.newInstance;;;
Class.newInstance;sun.awt.resources.awt;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;sun.net.www.protocol.jar.Handler;java.net.URL.getURLStreamHandler;1232;;
Class.newInstance;sun.reflect.GeneratedConstructorAccessor$HASHED$72e2a929f247be2195e2fffd04bfa1a804cdd27a;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.reflect.GeneratedMethodAccessor$HASHED$fd1110e325af8fb38d801f2266d9ad16c2d45366;sun.reflect.MethodAccessorGenerator$1.run;403;;
Class.newInstance;sun.security.provider.Sun;sun.security.jca.ProviderConfig$2.run;221;;
Class.newInstance;sun.text.resources.FormatData;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;sun.text.resources.en.FormatData_en;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;sun.text.resources.en.FormatData_en_AU;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;sun.util.logging.resources.logging;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;sun.util.resources.CalendarData;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;sun.util.resources.CurrencyNames;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;sun.util.resources.en.CalendarData_en;java.util.ResourceBundle$Control.newBundle;2662;;
Class.newInstance;sun.util.resources.en.CurrencyNames_en_AU;java.util.ResourceBundle$Control.newBundle;2662;;
Constructor.getModifiers;<java.awt.EventQueue: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.batik.extension.svg.BatikDomExtension: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.commons.logging.impl.Jdk14Logger: void <init>(java.lang.String)>;sun.reflect.NativeConstructorAccessorImpl.newInstance;58;isAccessible=false;
Constructor.getModifiers;<org.apache.commons.logging.impl.LogFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xalan.processor.TransformerFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.jaxp.SAXParserFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.parsers.SAXParser: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<org.apache.xerces.parsers.XIncludeAwareParserConfiguration: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.awt.resources.awt: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedConstructorAccessor$HASHED$72e2a929f247be2195e2fffd04bfa1a804cdd27a: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.reflect.GeneratedMethodAccessor$HASHED$fd1110e325af8fb38d801f2266d9ad16c2d45366: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.en.FormatData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.text.resources.en.FormatData_en_AU: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.logging.resources.logging: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.CalendarData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.CurrencyNames: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.en.CalendarData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.getModifiers;<sun.util.resources.en.CurrencyNames_en_AU: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<com.sun.proxy.$Proxy$HASHED$7f317a7c84b9550633592b3056045b71af0e38af: void <init>(java.lang.reflect.InvocationHandler)>;java.lang.reflect.Proxy.newProxyInstance;739;isAccessible=false;
Constructor.newInstance;<com.sun.proxy.$Proxy$HASHED$b3ddfcf90629c4c6253d7c639fa0634ef5087e6c: void <init>(java.lang.reflect.InvocationHandler)>;java.lang.reflect.Proxy.newProxyInstance;739;isAccessible=false;
Constructor.newInstance;<java.awt.EventQueue: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<java.awt.GraphicsEnvironment$$Lambda$1: void <init>()>;java.lang.invoke.InnerClassLambdaMetafactory.buildCallSite;215;isAccessible=true;
Constructor.newInstance;<org.apache.batik.extension.svg.BatikDomExtension: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.commons.logging.impl.Jdk14Logger: void <init>(java.lang.String)>;org.apache.commons.logging.impl.LogFactoryImpl.newInstance;529;isAccessible=false;
Constructor.newInstance;<org.apache.commons.logging.impl.LogFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.fop.events.EventFormatter$LookupFieldPartFactory: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.fo.FOElementMapping: void <init>()>;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;isAccessible=false;
Constructor.newInstance;<org.apache.fop.fo.FONode$GatherContextInfoFunction: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.fo.extensions.ExtensionElementMapping: void <init>()>;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;isAccessible=false;
Constructor.newInstance;<org.apache.fop.fo.extensions.InternalElementMapping: void <init>()>;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;isAccessible=false;
Constructor.newInstance;<org.apache.fop.fo.extensions.OldExtensionElementMapping: void <init>()>;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;isAccessible=false;
Constructor.newInstance;<org.apache.fop.fo.extensions.svg.BatikExtensionElementMapping: void <init>()>;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;isAccessible=false;
Constructor.newInstance;<org.apache.fop.fo.extensions.svg.SVGElementMapping: void <init>()>;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;isAccessible=false;
Constructor.newInstance;<org.apache.fop.fo.extensions.xmp.RDFElementMapping: void <init>()>;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;isAccessible=false;
Constructor.newInstance;<org.apache.fop.fo.extensions.xmp.XMPContentHandlerFactory: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.fo.extensions.xmp.XMPElementMapping: void <init>()>;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;isAccessible=false;
Constructor.newInstance;<org.apache.fop.image.loader.batik.ImageConverterG2D2SVG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.image.loader.batik.ImageConverterSVG2G2D: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.image.loader.batik.ImageConverterWMF2G2D: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.image.loader.batik.ImageLoaderFactorySVG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.image.loader.batik.ImageLoaderFactoryWMF: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.image.loader.batik.PreloaderSVG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.image.loader.batik.PreloaderWMF: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.afp.AFPDocumentHandlerMaker: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.afp.AFPImageHandlerGraphics2D: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.afp.AFPImageHandlerRawCCITTFax: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.afp.AFPImageHandlerRawJPEG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.afp.AFPImageHandlerRawStream: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.afp.AFPImageHandlerRenderedImage: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.afp.AFPImageHandlerSVG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.afp.AFPSVGHandler: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.afp.extensions.AFPElementMapping: void <init>()>;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.afp.extensions.AFPExtensionHandlerFactory: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.awt.AWTRendererMaker: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.bitmap.PNGDocumentHandlerMaker: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.bitmap.PNGRendererMaker: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.bitmap.TIFFDocumentHandlerMaker: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.bitmap.TIFFRendererMaker: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.intermediate.IFSerializerMaker: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.java2d.Java2DImageHandlerGraphics2D: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.java2d.Java2DImageHandlerRenderedImage: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.java2d.Java2DSVGHandler: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pcl.PCLDocumentHandlerMaker: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pcl.PCLImageHandlerGraphics2D: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pcl.PCLImageHandlerRenderedImage: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pcl.PCLSVGHandler: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pcl.extensions.PCLElementMapping: void <init>()>;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pdf.PDFDocumentHandlerMaker: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pdf.PDFImageHandlerGraphics2D: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pdf.PDFImageHandlerRawCCITTFax: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pdf.PDFImageHandlerRawJPEG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pdf.PDFImageHandlerRawPNG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pdf.PDFImageHandlerRenderedImage: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pdf.PDFImageHandlerSVG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pdf.PDFSVGHandler: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pdf.extensions.PDFElementMapping: void <init>()>;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.pdf.extensions.PDFExtensionHandlerFactory: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.print.PrintRendererMaker: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.ps.PSDocumentHandlerMaker: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.ps.PSImageHandlerEPS: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.ps.PSImageHandlerGraphics2D: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.ps.PSImageHandlerRawCCITTFax: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.ps.PSImageHandlerRawJPEG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.ps.PSImageHandlerRawPNG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.ps.PSImageHandlerRenderedImage: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.ps.PSImageHandlerSVG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.ps.PSSVGHandler: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.ps.extensions.PSExtensionElementMapping: void <init>()>;org.apache.fop.fo.ElementMappingRegistry.addElementMapping;98;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.ps.extensions.PSExtensionHandlerFactory: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.rtf.RTFFOEventHandlerMaker: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.txt.TXTRendererMaker: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.render.xml.XMLRendererMaker: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.util.text.ChoiceFieldPart$Factory: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.util.text.EqualsFieldPart$Factory: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.util.text.GlyphNameFieldPart$Factory: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.util.text.HexFieldPart$Factory: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.util.text.IfFieldPart$Factory: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.fop.util.text.LocatorFormatter: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xalan.processor.TransformerFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.impl.dv.dtd.DTDDVFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.jaxp.SAXParserFactoryImpl: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.parsers.SAXParser: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xerces.parsers.XIncludeAwareParserConfiguration: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.ImageConverterBitmap2G2D: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.ImageConverterBuffered2Rendered: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.ImageConverterG2D2Bitmap: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.ImageConverterRendered2PNG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.ImageLoaderFactoryEPS: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.ImageLoaderFactoryInternalTIFF: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.ImageLoaderFactoryPNG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.ImageLoaderFactoryRaw: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.ImageLoaderFactoryRawCCITTFax: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.PreloaderBMP: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.PreloaderEMF: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.PreloaderEPS: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.PreloaderGIF: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.PreloaderJPEG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.PreloaderRawPNG: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.PreloaderTIFF: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.imageio.ImageLoaderFactoryImageIO: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.apache.xmlgraphics.image.loader.impl.imageio.PreloaderImageIO: void <init>()>;org.apache.xmlgraphics.util.Service.providers;85;isAccessible=false;
Constructor.newInstance;<org.dacapo.harness.Fop: void <init>(org.dacapo.parser.Config,java.io.File)>;org.dacapo.harness.TestHarness.runBenchmark;193;isAccessible=false;
Constructor.newInstance;<sun.awt.resources.awt: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.net.www.protocol.jar.Handler: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedConstructorAccessor$HASHED$72e2a929f247be2195e2fffd04bfa1a804cdd27a: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.reflect.GeneratedMethodAccessor$HASHED$fd1110e325af8fb38d801f2266d9ad16c2d45366: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.security.provider.SHA: void <init>()>;java.security.Provider$Service.newInstance;1595;isAccessible=false;
Constructor.newInstance;<sun.security.provider.Sun: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.FormatData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.en.FormatData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.text.resources.en.FormatData_en_AU: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.logging.resources.logging: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.CalendarData: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.CurrencyNames: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.en.CalendarData_en: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Constructor.newInstance;<sun.util.resources.en.CurrencyNames_en_AU: void <init>()>;java.lang.Class.newInstance;;isAccessible=true;
Field.get*;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.util.logging.LoggingSupport$1.run;57;isAccessible=true;
Field.getDeclaringClass;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=false;
Field.getDeclaringClass;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;43;isAccessible=true;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=false;
Field.getModifiers;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=false;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;34;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;35;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor;36;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;48;isAccessible=true;
Field.getModifiers;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;sun.reflect.UnsafeFieldAccessorImpl.<init>;52;isAccessible=true;
Field.getName;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.CallSite: java.lang.invoke.MethodHandle target>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodHandle: java.lang.invoke.LambdaForm form>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodHandle: java.lang.invoke.MethodType type>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodType: java.lang.Class rtype>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodType: java.lang.Class[] ptypes>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.lang.invoke.MethodType: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.CopyOnWriteArrayList: java.util.concurrent.locks.ReentrantLock lock>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.CopyOnWriteArrayList: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.atomic.AtomicMarkableReference: java.util.concurrent.atomic.AtomicMarkableReference$Pair pair>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int CANCELLED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int CONDITION>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int PROPAGATE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int SIGNAL>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: int waitStatus>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node EXCLUSIVE>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node SHARED>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node next>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer$Node: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node prev>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: int state>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node head>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: java.util.concurrent.locks.AbstractQueuedSynchronizer$Node tail>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.concurrent.locks.AbstractQueuedSynchronizer: long serialVersionUID>;java.lang.Class.searchFields;;isAccessible=false;
Field.getName;<java.util.logging.LoggingProxyImpl: sun.util.logging.LoggingProxy INSTANCE>;java.lang.Class.searchFields;;isAccessible=false;
Field.set*;<java.lang.invoke.BoundMethodHandle$Species_L3: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;792;isAccessible=false;
Field.set*;<java.lang.invoke.BoundMethodHandle$Species_L4: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;792;isAccessible=false;
Field.set*;<java.lang.invoke.BoundMethodHandle$Species_LL: java.lang.invoke.BoundMethodHandle$SpeciesData SPECIES_DATA>;java.lang.invoke.BoundMethodHandle$Factory.setSpeciesDataToConcreteBMHClass;792;isAccessible=false;
Method.getDeclaringClass;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;sun.reflect.NativeMethodAccessorImpl.invoke;50;isAccessible=false;
Method.getDeclaringClass;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;sun.reflect.NativeMethodAccessorImpl.invoke;53;isAccessible=false;
Method.getModifiers;<Harness: void main(java.lang.String[])>;sun.launcher.LauncherHelper.validateMainClass;663;isAccessible=false;
Method.getModifiers;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;sun.reflect.NativeMethodAccessorImpl.invoke;58;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void flowNotMappingToRegionBody(java.lang.Object,java.lang.String,java.lang.String,org.xml.sax.Locator)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void lastPageMasterReferenceMissing(java.lang.Object,org.xml.sax.Locator)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void layoutHasReachedParts(java.lang.Object,int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void missingSubsequencesInPageSequenceMaster(java.lang.Object,java.lang.String,org.xml.sax.Locator)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void noMatchingPageMaster(java.lang.Object,java.lang.String,java.lang.String,org.xml.sax.Locator)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void nonRestartableContentFlowingToNarrowerPage(java.lang.Object)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void objectTooWide(java.lang.Object,java.lang.String,int,int,org.xml.sax.Locator)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void overconstrainedAdjustEndIndent(java.lang.Object,java.lang.String,int,org.xml.sax.Locator)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void pageSequenceMasterExhausted(java.lang.Object,java.lang.String,boolean,org.xml.sax.Locator)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void regionOverflow(java.lang.Object,java.lang.String,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void rowTooTall(java.lang.Object,int,int,int,org.xml.sax.Locator)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void staticRegionOverflow(java.lang.Object,java.lang.String,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void tableFixedAutoWidthNotSupported(java.lang.Object,org.xml.sax.Locator)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void viewportBPDOverflow(java.lang.Object,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void viewportIPDOverflow(java.lang.Object,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.render.RendererEventProducer: void endPage(java.lang.Object,int)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getModifiers;<org.apache.fop.render.RendererEventProducer: void ioError(java.lang.Object,java.io.IOException)>;java.lang.reflect.Method.isDefault;;isAccessible=false;
Method.getName;<Harness: void main(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: boolean equals(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: boolean equals(java.lang.Object)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<java.lang.Object: int hashCode()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: int hashCode()>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.Class getClass()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: java.lang.String toString()>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<java.lang.Object: void notify()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: void notifyAll()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: void wait()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Object: void wait(long,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: boolean holdsLock(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: boolean interrupted()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: boolean isAlive()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: boolean isDaemon()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: boolean isInterrupted()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: int activeCount()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: int countStackFrames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: int enumerate(java.lang.Thread[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: int getPriority()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;sun.reflect.NativeMethodAccessorImpl.invoke;54;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.String getName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.Thread currentThread()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.Thread$State getState()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: java.util.Map getAllStackTraces()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: long getId()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void checkAccess()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void destroy()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void dumpStack()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void interrupt()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void join()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void join(long)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void join(long,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void resume()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void run()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setDaemon(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setName(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setPriority(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void sleep(long)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void sleep(long,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void start()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void stop()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void stop(java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void suspend()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Thread: void yield()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: int getStackTraceDepth()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: int validateSuppressedExceptionsList(java.util.List)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.StackTraceElement getStackTraceElement(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.StackTraceElement[] getOurStackTrace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.String getLocalizedMessage()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.String getMessage()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.Throwable getCause()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: java.lang.Throwable[] getSuppressed()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: void printEnclosedStackTrace(java.lang.Throwable$PrintStreamOrWriter,java.lang.StackTraceElement[],java.lang.String,java.lang.String,java.util.Set)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: void printStackTrace()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: void printStackTrace(java.io.PrintWriter)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: void printStackTrace(java.lang.Throwable$PrintStreamOrWriter)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: void readObject(java.io.ObjectInputStream)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.Throwable: void writeObject(java.io.ObjectOutputStream)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: boolean isInvokeSpecial()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.Class internalCallerClass()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.String internalProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.BoundMethodHandle rebind()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.LambdaForm chooseDelegatingForm(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.LambdaForm makeReinvokerForm(java.lang.invoke.MethodHandle,int,java.lang.Object,java.lang.String,boolean,java.lang.invoke.LambdaForm$NamedFunction,java.lang.invoke.LambdaForm$NamedFunction)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.LambdaForm makeReinvokerForm(java.lang.invoke.MethodHandle,int,java.lang.Object,java.lang.invoke.LambdaForm$NamedFunction)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MemberName internalMemberName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle asTypeUncached(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle getTarget()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DelegatingMethodHandle: java.lang.invoke.MethodHandle getTarget()>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.Object checkReceiver(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.Object checkReceiver(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.Object internalProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle$Interface: java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: boolean checkInitialized(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: boolean shouldBeInitialized(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: int afIndex(byte,boolean,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: int ftypeKind(java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object allocateInstance(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object allocateInstance(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkBase(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkBase(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object checkCast(java.lang.Object,java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object constructorMethod(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object constructorMethod(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object findDirectMethodHandle(java.lang.invoke.LambdaForm$Name)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberName(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberName(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberNameEnsureInit(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object internalMemberNameEnsureInit(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object nullCheck(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object staticBase(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.Object staticBase(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.String internalProperties()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.BoundMethodHandle rebind()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(byte,java.lang.Class,java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.Class,java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.reflect.Field)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle make(java.lang.reflect.Method)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.DirectMethodHandle makeAllocator(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm makePreparedFieldLambdaForm(byte,boolean,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm makePreparedLambdaForm(java.lang.invoke.MethodType,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedFieldLambdaForm(byte,boolean,java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedFieldLambdaForm(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedLambdaForm(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.LambdaForm preparedLambdaForm(java.lang.invoke.MethodType,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.MemberName internalMemberName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: java.lang.invoke.MethodHandle copyWith(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long fieldOffset(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long fieldOffset(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long staticOffset(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: long staticOffset(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void ensureInitialized()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void ensureInitialized(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void ensureInitialized(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.DirectMethodHandle: void maybeCompile(java.lang.invoke.LambdaForm,java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: boolean checkInvoker(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Class impliedRestargType(java.lang.invoke.MethodType,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object checkGenericType(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object checkGenericType(java.lang.Object,java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object getCallSiteTarget(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.Object getCallSiteTarget(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.LambdaForm callSiteForm(java.lang.invoke.MethodType,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.LambdaForm invokeHandleForm(java.lang.invoke.MethodType,boolean,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName invokeBasicMethod(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName linkToCallSiteMethod(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName linkToTargetMethod(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MemberName methodHandleInvokeLinkerMethod(java.lang.String,java.lang.invoke.MethodType,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle basicInvoker()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle cachedInvoker(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle exactInvoker()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle genericInvoker()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle makeExactOrGeneralInvoker(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle setCachedInvoker(int,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.MethodHandle spreadInvoker(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: java.lang.invoke.WrongMethodTypeException newWrongMethodTypeException(java.lang.invoke.MethodType,java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkCustomized(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkCustomized(java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkExactType(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void checkExactType(java.lang.Object,java.lang.Object)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void maybeCompileToBytecode(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.Invokers: void maybeCustomize(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: boolean assertCorrectArity(java.lang.invoke.MethodHandle,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: boolean profileBoolean(boolean,int[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: boolean profileBoolean(boolean,int[])>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: int countNonNull(java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.ClassCastException newClassCastException(java.lang.Class,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object castReference(java.lang.Class,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object copyAsPrimitiveArray(sun.invoke.util.Wrapper,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object guardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object guardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle,java.lang.Object[])>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object valueConversion(java.lang.Class,java.lang.Class,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] array(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] computeValueConversions(java.lang.invoke.MethodType,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillArray(java.lang.Integer,java.lang.Object[],java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillNewArray(java.lang.Integer,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] fillNewTypedArray(java.lang.Object[],java.lang.Integer,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] identity(java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] makeArray(java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.Object[] prepend(java.lang.Object,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.LambdaForm makeGuardWithCatchForm(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.LambdaForm makeGuardWithTestForm(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle bindCaller(java.lang.invoke.MethodHandle,java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle buildArrayProducer(java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle buildFiller(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle buildVarargsArray(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle fakeMethodHandleInvoke(java.lang.invoke.MemberName)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle fillToRight(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle findCollector(java.lang.String,int,java.lang.Class,java.lang.Class[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeArrayElementAccessor(java.lang.Class,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeBlockInlningWrapper(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeCollectArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,int,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeGuardWithCatch(java.lang.invoke.MethodHandle,java.lang.Class,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeGuardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeIntrinsic(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandleImpl$Intrinsic)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeIntrinsic(java.lang.invoke.MethodType,java.lang.invoke.LambdaForm,java.lang.invoke.MethodHandleImpl$Intrinsic)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvert(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvert(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvertByEditor(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makePairwiseConvertIndirect(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,boolean,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeSpreadArguments(java.lang.invoke.MethodHandle,java.lang.Class,int,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeVarargsCollector(java.lang.invoke.MethodHandle,java.lang.Class)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle makeWrappedMember(java.lang.invoke.MethodHandle,java.lang.invoke.MemberName,boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle profile(java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle selectAlternative(boolean,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle throwException(java.lang.invoke.MethodType)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle varargsArray(int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle varargsArray(java.lang.Class,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] access$000()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] access$100()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] makeArrays()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: java.lang.invoke.MethodHandle[] makeFillArrays()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: sun.invoke.empty.Empty throwException(java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: sun.invoke.empty.Empty throwException(java.lang.Throwable)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void assertSame(java.lang.Object,java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void checkSpreadArgument(java.lang.Object,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void checkSpreadArgument(java.lang.Object,int)>;java.lang.invoke.MemberName.<init>;540;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void fillWithArguments(java.lang.Object[],int,java.lang.Object[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<java.lang.invoke.MethodHandleImpl: void initStatics()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: boolean canDecodeInput(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: boolean isOwnReader(javax.imageio.ImageReader)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: java.lang.Class[] getInputTypes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: java.lang.String[] getImageWriterSpiNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: javax.imageio.ImageReader createReaderInstance()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderSpi: javax.imageio.ImageReader createReaderInstance(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: boolean isStandardImageMetadataFormatSupported()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: boolean isStandardStreamMetadataFormatSupported()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String getNativeImageMetadataFormatName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String getNativeStreamMetadataFormatName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String getPluginClassName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getExtraImageMetadataFormatNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getExtraStreamMetadataFormatNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFileSuffixes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getFormatNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: java.lang.String[] getMIMETypes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: javax.imageio.metadata.IIOMetadataFormat getImageMetadataFormat(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageReaderWriterSpi: javax.imageio.metadata.IIOMetadataFormat getStreamMetadataFormat(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: boolean canEncodeImage(java.awt.image.RenderedImage)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: boolean canEncodeImage(javax.imageio.ImageTypeSpecifier)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: boolean isFormatLossless()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: boolean isOwnWriter(javax.imageio.ImageWriter)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: java.lang.Class[] getOutputTypes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: java.lang.String[] getImageReaderSpiNames()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: javax.imageio.ImageWriter createWriterInstance()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<javax.imageio.spi.ImageWriterSpi: javax.imageio.ImageWriter createWriterInstance(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: boolean isDebugEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: boolean isErrorEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: boolean isFatalEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: boolean isInfoEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: boolean isTraceEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: boolean isWarnEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void debug(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void error(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void fatal(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void fatal(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void info(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void info(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void trace(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void trace(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void warn(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: boolean isDebugEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: boolean isErrorEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: boolean isFatalEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: boolean isInfoEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: boolean isTraceEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: boolean isWarnEnabled()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: java.util.logging.Logger getLogger()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: void debug(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: void debug(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: void error(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: void error(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: void fatal(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: void fatal(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: void info(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: void info(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: void trace(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: void trace(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: void warn(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.commons.logging.impl.Jdk14Logger: void warn(java.lang.Object,java.lang.Throwable)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.cli.Main: boolean checkDependencies()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.cli.Main: java.net.URL[] getJARList()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.cli.Main: void main(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.cli.Main: void startFOP(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.cli.Main: void startFOPWithDynamicClasspath(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void flowNotMappingToRegionBody(java.lang.Object,java.lang.String,java.lang.String,org.xml.sax.Locator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void flowNotMappingToRegionBody(java.lang.Object,java.lang.String,java.lang.String,org.xml.sax.Locator)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void lastPageMasterReferenceMissing(java.lang.Object,org.xml.sax.Locator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void lastPageMasterReferenceMissing(java.lang.Object,org.xml.sax.Locator)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void layoutHasReachedParts(java.lang.Object,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void layoutHasReachedParts(java.lang.Object,int)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void missingSubsequencesInPageSequenceMaster(java.lang.Object,java.lang.String,org.xml.sax.Locator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void missingSubsequencesInPageSequenceMaster(java.lang.Object,java.lang.String,org.xml.sax.Locator)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void noMatchingPageMaster(java.lang.Object,java.lang.String,java.lang.String,org.xml.sax.Locator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void noMatchingPageMaster(java.lang.Object,java.lang.String,java.lang.String,org.xml.sax.Locator)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void nonRestartableContentFlowingToNarrowerPage(java.lang.Object)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void nonRestartableContentFlowingToNarrowerPage(java.lang.Object)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void objectTooWide(java.lang.Object,java.lang.String,int,int,org.xml.sax.Locator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void objectTooWide(java.lang.Object,java.lang.String,int,int,org.xml.sax.Locator)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void overconstrainedAdjustEndIndent(java.lang.Object,java.lang.String,int,org.xml.sax.Locator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void overconstrainedAdjustEndIndent(java.lang.Object,java.lang.String,int,org.xml.sax.Locator)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void pageSequenceMasterExhausted(java.lang.Object,java.lang.String,boolean,org.xml.sax.Locator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void pageSequenceMasterExhausted(java.lang.Object,java.lang.String,boolean,org.xml.sax.Locator)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void regionOverflow(java.lang.Object,java.lang.String,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void regionOverflow(java.lang.Object,java.lang.String,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void rowTooTall(java.lang.Object,int,int,int,org.xml.sax.Locator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void rowTooTall(java.lang.Object,int,int,int,org.xml.sax.Locator)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void staticRegionOverflow(java.lang.Object,java.lang.String,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void staticRegionOverflow(java.lang.Object,java.lang.String,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void tableFixedAutoWidthNotSupported(java.lang.Object,org.xml.sax.Locator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void tableFixedAutoWidthNotSupported(java.lang.Object,org.xml.sax.Locator)>;org.apache.fop.events.DefaultEventBroadcaster$1.invoke;151;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void tableFixedAutoWidthNotSupported(java.lang.Object,org.xml.sax.Locator)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void viewportBPDOverflow(java.lang.Object,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void viewportBPDOverflow(java.lang.Object,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void viewportIPDOverflow(java.lang.Object,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.layoutmgr.BlockLevelEventProducer: void viewportIPDOverflow(java.lang.Object,java.lang.String,int,boolean,boolean,org.xml.sax.Locator)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.render.RendererEventProducer: void endPage(java.lang.Object,int)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.render.RendererEventProducer: void endPage(java.lang.Object,int)>;org.apache.fop.events.DefaultEventBroadcaster$1.invoke;151;isAccessible=false;
Method.getName;<org.apache.fop.render.RendererEventProducer: void endPage(java.lang.Object,int)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.render.RendererEventProducer: void ioError(java.lang.Object,java.io.IOException)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.render.RendererEventProducer: void ioError(java.lang.Object,java.io.IOException)>;sun.misc.ProxyGenerator.addProxyMethod;587;isAccessible=false;
Method.getName;<org.apache.fop.render.ps.PSRendererOption: java.lang.Object getDefaultValue()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.render.ps.PSRendererOption: java.lang.String getName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.render.ps.PSRendererOption: org.apache.fop.render.ps.PSRendererOption valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.apache.fop.render.ps.PSRendererOption: org.apache.fop.render.ps.PSRendererOption[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: boolean isValidSize(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: boolean isValidThreadCount(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: double coeff_of_var(long[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: java.lang.Class findClass()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: java.lang.String getBuildNickName()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: java.lang.String getBuildVersion()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void bmInfo(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void bmSizes()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void dump(boolean)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void main(java.lang.String[])>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void makeCleanScratch(java.io.File)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void rmdir(java.io.File)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void runBenchmark(java.io.File,java.lang.String,org.dacapo.harness.TestHarness)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<org.dacapo.harness.TestHarness: void setBuildInfo()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: java.lang.String toString()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: sun.font.EAttribute forAttribute(java.text.AttributedCharacterIterator$Attribute)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: sun.font.EAttribute valueOf(java.lang.String)>;java.lang.Class.searchMethods;;isAccessible=false;
Method.getName;<sun.font.EAttribute: sun.font.EAttribute[] values()>;java.lang.Class.searchMethods;;isAccessible=false;
Method.invoke;<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>;org.apache.commons.logging.LogFactory.getContextClassLoader;442;isAccessible=false;
Method.invoke;<org.apache.fop.cli.Main: void startFOP(java.lang.String[])>;org.dacapo.harness.Fop.iterate;65;isAccessible=false;
Method.invoke;<org.apache.fop.render.ps.PSRendererOption: org.apache.fop.render.ps.PSRendererOption[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
Method.invoke;<org.dacapo.harness.TestHarness: void main(java.lang.String[])>;Harness.main;;isAccessible=false;
Method.invoke;<sun.font.EAttribute: sun.font.EAttribute[] values()>;java.lang.Class.getEnumConstantsShared;;isAccessible=true;
